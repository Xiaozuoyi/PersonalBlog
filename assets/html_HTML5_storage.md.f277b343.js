import{_ as s,o as e,c as a,a as n}from"./app.a2d80bcf.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"本地存储","slug":"本地存储","link":"#本地存储","children":[]},{"level":2,"title":"Cookie","slug":"cookie","link":"#cookie","children":[]},{"level":2,"title":"WebStorage","slug":"webstorage","link":"#webstorage","children":[{"level":3,"title":"LocalStorage","slug":"localstorage","link":"#localstorage","children":[]},{"level":3,"title":"SessionStorage","slug":"sessionstorage","link":"#sessionstorage","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"html/HTML5/storage.md","lastUpdated":1675852229000}'),l={name:"html/HTML5/storage.md"},o=n(`<h2 id="本地存储" tabindex="-1">本地存储 <a class="header-anchor" href="#本地存储" aria-hidden="true">#</a></h2><p>我们知道，在HTML4中可以使用cookie在客户端保存诸如用户名等简单的用户信息，但是，通过长期的使用，你会发现，用cookie存储永久数据存在以下几个问题</p><ul><li>大小：cookie的大小被限制在4KB。</li><li>带宽：cookie是随HTTP事务一起被发送的，因此会浪费一部分发送cookie时使用的带宽。</li><li>复杂性：要正确的操纵cookie是很困难的。</li></ul><div class="warning custom-block"><p class="custom-block-title">提示</p><p>针对这些问题，在HTML5中，重新提供了一种在客户端本地保存数据的功能，它就是Web Storage。</p></div><h2 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-hidden="true">#</a></h2><p>Cookie是最早被提出来的本地存储方式，在此之前，服务端是无法判断网络中的两个请求是否是同一用户发起的，为解决这个问题，Cookie就出现了。Cookie的大小只有4kb，它是一种纯文本文件，每次发起HTTP请求都会携带Cookie。</p><p><strong>特性：</strong></p><ul><li>Cookie一旦创建成功，名称就无法修改</li><li>Cookie是无法跨域名的，也就是说a域名和b域名下的cookie是无法共享的，这也是由Cookie的隐私安全性决定的，这样就能够阻止非法获取其他网站的Cookie</li><li>每个域名下Cookie的数量不能超过20个，每个Cookie的大小不能超过4kb</li><li>有安全问题，如果Cookie被拦截了，那就可获得session的所有信息，即使加密也于事无补，无需知道cookie的意义，只要转发cookie就能达到目的</li><li>Cookie在请求一个新的页面的时候都会被发送过去</li></ul><p><strong>使用场景</strong></p><ul><li>在HTML4中可以使用cookie在客户端保存诸如用户名等简单的用户信息</li><li>可以用来统计页面的点击次数</li><li>最常见的使用场景就是Cookie和session结合使用，我们将sessionId存储到Cookie中，每次发请求都会携带这个sessionId，这样服务端就知道是谁发起的请求，从而响应相应的信息</li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p>如果需要域名之间跨域共享Cookie，有两种方法：</p><ul><li>使用Nginx反向代理</li><li>在一个站点登陆之后，往其他网站写Cookie。服务端的Session存储到一个节点，Cookie存储sessionId</li></ul></div><h2 id="webstorage" tabindex="-1">WebStorage <a class="header-anchor" href="#webstorage" aria-hidden="true">#</a></h2><ul><li>两个主要目标： <ul><li>提供一种在cookie之外存储会话数据的路径。</li><li>提供一种存储大量可以跨会话存在的数据的机制。</li></ul></li></ul><h3 id="localstorage" tabindex="-1">LocalStorage <a class="header-anchor" href="#localstorage" aria-hidden="true">#</a></h3><p>LocalStorage是HTML5新引入的特性，由于有的时候我们存储的信息较大，Cookie就不能满足我们的需求，这时候LocalStorage就派上用场了。</p><p><strong>优点：</strong></p><ul><li>localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。</li><li>localStorage除非主动删除数据，否则数据永远不会消失。</li><li>仅储存在本地，不像Cookie那样每次HTTP请求都会被携带。</li><li>在大小方面，LocalStorage的大小一般为5MB，可以储存更多的信息</li></ul><p><strong>缺点：</strong></p><ul><li>存在浏览器兼容问题，IE8以下版本的浏览器不支持</li><li>如果浏览器设置为隐私模式，那我们将无法读取到LocalStorage</li><li>LocalStorage受到同源策略的限制，即端口、协议、主机地址有任何一个不相同，都不会访问</li></ul><p><strong>使用场景：</strong></p><ul><li>网站换肤功能</li><li>存储网站中的用户浏览信息和网站一些不常变动的个人信息</li></ul><details class="details custom-block"><summary>常用API</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 保存数据到 localStorage</span></span>
<span class="line"><span style="color:#F8F8F2;">localStorage.</span><span style="color:#50FA7B;">setItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">key</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">value</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 从 localStorage 获取数据</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> localStorage.</span><span style="color:#50FA7B;">getItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">key</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 从 localStorage 删除保存的数据</span></span>
<span class="line"><span style="color:#F8F8F2;">localStorage.</span><span style="color:#50FA7B;">removeItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">key</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 从 localStorage 删除所有保存的数据</span></span>
<span class="line"><span style="color:#F8F8F2;">localStorage.</span><span style="color:#50FA7B;">clear</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 获取某个索引的Key</span></span>
<span class="line"><span style="color:#F8F8F2;">localStorage.</span><span style="color:#50FA7B;">key</span><span style="color:#F8F8F2;">(index)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></details><h3 id="sessionstorage" tabindex="-1">SessionStorage <a class="header-anchor" href="#sessionstorage" aria-hidden="true">#</a></h3><p>SessionStorage是在HTML5才提出来的存储方案，SessionStorage 主要用于临时保存同一窗口(或标签页)的数据，刷新页面时不会删除，关闭窗口或标签页之后将会删除这些数据。</p><p><strong>优点：</strong></p><ul><li>SessionStorage的生命周期是在仅在当前会话下有效；</li><li>LocalStorage和SessionStorage都不能被爬虫爬取；</li><li>SessionStorage也有同源策略的限制，但是SessionStorage有一条更加严格的限制，SessionStorage只有在同一浏览器的同一窗口下才能够共享；</li></ul><div class="warning custom-block"><p class="custom-block-title">提示</p><p>SessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。</p></div><p><strong>使用场景</strong></p><p>由于SessionStorage具有时效性，所以可以用来存储一些网站的游客登录的信息，还有临时的浏览记录的信息。当关闭网站之后，这些信息也就随之消除了</p><details class="details custom-block"><summary>常用API</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 保存数据到 sessionStorage</span></span>
<span class="line"><span style="color:#F8F8F2;">sessionStorage.</span><span style="color:#50FA7B;">setItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">key</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">value</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 从 sessionStorage 获取数据</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> sessionStorage.</span><span style="color:#50FA7B;">getItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">key</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 从 sessionStorage 删除保存的数据</span></span>
<span class="line"><span style="color:#F8F8F2;">sessionStorage.</span><span style="color:#50FA7B;">removeItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">key</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 从 sessionStorage 删除所有保存的数据</span></span>
<span class="line"><span style="color:#F8F8F2;">sessionStorage.</span><span style="color:#50FA7B;">clear</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 获取某个索引的Key</span></span>
<span class="line"><span style="color:#F8F8F2;">sessionStorage.</span><span style="color:#50FA7B;">key</span><span style="color:#F8F8F2;">(index)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></details><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:center;">特性</th><th style="text-align:center;">Cookie</th><th style="text-align:center;">SessionStorage</th><th style="text-align:center;">LocalStorage</th></tr></thead><tbody><tr><td style="text-align:center;">数据生命周期</td><td style="text-align:center;">生成时就会指定一个maxAge值，这就是cookie的生命周期，在这个周期内cookie有效，默认关闭浏览器无效</td><td style="text-align:center;">页面会话期间可用</td><td style="text-align:center;">除非数据被清除，否则一直存在</td></tr><tr><td style="text-align:center;">存放数据大小</td><td style="text-align:center;">4kb左右，因为每次http请求都会携带cookie</td><td style="text-align:center;">一般5MB或更大</td><td style="text-align:center;">一般5MB或更大</td></tr><tr><td style="text-align:center;">与服务器通信</td><td style="text-align:center;">由对服务器的请求来传递，每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td style="text-align:center;">不参与和服务器的通信</td><td style="text-align:center;">不参与和服务器的通信</td></tr><tr><td style="text-align:center;">易用性</td><td style="text-align:center;">cookie需要自己封装setCookie，getCookie</td><td style="text-align:center;">可用原生接口，也可自己封装对Object和Arrey更好的支持</td><td style="text-align:center;">可用原生接口，也可自己封装对Object和Arrey更好的支持</td></tr><tr><td style="text-align:center;">共同点</td><td style="text-align:center;">都是保存在浏览器端，和服务器的sessin机制不同</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table>`,32),t=[o];function p(r,i,c,F,d,y){return e(),a("div",null,t)}const u=s(l,[["render",p]]);export{b as __pageData,u as default};
